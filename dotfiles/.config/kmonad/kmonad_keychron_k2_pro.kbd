#| --------------------------------------------------------------------------

                              KMonad: Guided tour

  Welcome to the KMonad configuration tutorial. This document aims to explain:
  1. The configuration syntax
  2. The required information
  3. All possible configuration options

  This document should be a runnable configuration, so with some tweaks to the
  `defcfg` block (see below) you should be able to try out all the examples
  interactively.

  -------------------------------------------------------------------------- |#


#| --------------------------------------------------------------------------

                     Basic syntax: comments and parentheses

  KMonad's configuration language is styled on various lisps, like scheme or
  Common Lisp. In a lisp, every statement is entered between '(' and ')'s. If
  you are more used to Fortran style languages (python, ruby, C, Java, etc.), the
  change is quite straightforward: the function name moves into the parentheses,
  and you don't use commas to separate arguments. I.e.

  This:     my_function(a, 3, "Alakazam")
  Becomes:  (my_function a 3 "Alakazam")

  The reason for this is because Lisp-style languages are very easy to parse and
  write syntax-highlighters for.

  We also provide standard Lisp syntax for comments:
  - block comments between: #| and its reverse
  - line comments following: ;;

  Unlike standard lisp, a single ; does not denote a comment, but instead the
  keycode for semicolon.

  Also, as you might have noticed, whitespace is possible anywhere.

  To check for syntax errors while editing, invoke KMonad with the -d option.

  -------------------------------------------------------------------------- |#


#| --------------------------------------------------------------------------
                         Necessary: the `defcfg` block

  There are a few bits of information that are required to be present in a
  KMonad configuration file. One of these is the existence of exactly 1 `defcfg`
  statement. This statement is used to customize various configuration settings.
  Many of these settings have default values, but a minimal definition must
  include at least an 'input' field and an 'output' field. These describe how
  KMonad captures its inputs and how it emits its outputs.

  First, let's go over the optional, non-OS specific settings. Currently there
  are only 2:

  - fallthrough: `true` or `false`, defaults to `false`
testing te
    KMonad catches input events and tries to match them to various handlers. If
    it cannot match an event to any handler (for example, if it isn't included
    in the `defsrc` block, or if it is, but the current keymap does not map any
    buttons to it), then the event gets quietly ignored. If `fallthrough` is set
    to `true`, any unhandled events simply get reemitted.

  - allow-cmd: `true` or `false`, defaults to `false`

    If this is set to `false`, any action that runs a shell-command will simply
    log to `stdout` without ever running (log-level info). Don't ever enable
    this on a configuration that you do not trust, because:

      (cmd-button "rm -rf ~/*")

    is a thing. For more information on the `cmd-button' function, see the
    section on Command buttons below.

  There are also some optional OS specific settings that we support:

  - `cmp-seq': KEY, defaults to `RightAlt' (Linux X11 specific)

    This sets your compose key for Unicode input. For more information, as well
    as a workaround to also make this work on windows, see the section on
    Compose-key sequences below.

  - `cmp-seq-delay': NUMBER (in milliseconds)

    This sets a delay between each pressed key in a compose-key sequence.  Some
    environments may have troubles recognizing the key sequence if it's pressed
    too rapidly; if you experience any problems in this direction, you can try
    setting this value to `5' or `10' and see if that helps.

  Secondly, let's go over how to specify the `input` and `output` fields of a
  `defcfg` block. This differs between OS'es, and so do the capabilities of
  these interfaces.


  -- Linux ------

  In Linux we deal with input by performing an ioctl-grab on a specific
  device-file. This allows us to hook KMonad on the input of exactly 1 keyboard,
  and allows you to run multiple instances of KMonad for different keyboards. We
  make an input using:
    (device-file "/dev/input/by-id/my-keyboard-kbd")

  NOTE: Any valid path to a device-file will work, but it is recommended to use
  the 'by-id' directory, since these names will not change if you replug the
  device.

  We deal with output by creating a 'uinput' device. This requires that the
  'uinput' kernel module is loaded. The easiest way to ensure this is by calling
  'sudo modprobe uinput'. We create a uinput device using:
    (uinput-sink "name" "optional post-init command")
  -------------------------------------------------------------------------- |#

(defcfg
  ;; For Linux
  input  (device-file "/dev/input/by-id/usb-Keychron_Keychron_K2_Pro-event-kbd")
  output (uinput-sink "My KMonad output"
    ;; To understand the importance of the following line, see the section on
    ;; Compose-key sequences at the near-bottom of this file.
    "/run/current-system/sw/bin/sleep 1 && /run/current-system/sw/bin/setxkbmap -option compose:ralt")
  cmp-seq ralt    ;; Set the compose key to `RightAlt'
  cmp-seq-delay 5 ;; 5ms delay between each compose-key sequence press

  ;; For Windows
  ;; input  (low-level-hook)
  ;; output (send-event-sink)

  ;; For MacOS
  ;; input  (iokit-name "my-keyboard-product-string")
  ;; output (kext)

  ;; Comment this if you want unhandled events not to be emitted
  fallthrough true

  ;; Set this to false to disable any command-execution in KMonad
  allow-cmd true
)


(defsrc
  esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12  ssrq ins del
  grv   1    2    3    4    5    6    7    8    9    0    -    =     bspc   pgup
  tab    q    w    e    r    t    y    u    i    o    p    [    ]     \     home
  caps    a    s    d    f    g    h    j    k    l    ;    '        ret    end
  lsft     z    x    c    v    b    n    m    ,    .    /       rsft   up   pgdn
  lctl lmet lalt           spc                      ralt    rctl left down  rght
)


(defalias
   ;; main layer aliases
   ectl (tap-hold 150 esc ctl) ;; tap for esc, hold for ctrl
   ralt (layer-toggle altcuts)  ;; toggles altcuts layer which holds lesser used shortcuts
   ;; main-shift layer aliases
   lsft (around lsft (layer-toggle main-shift))  ;; toggles on main-shift layer that disables home-row mods
   ;; main layer home-row modifiers
   d (tap-hold 200 d (layer-toggle shortcuts)) ;; s on short press, toggle shortcuts layer on hold
   k (tap-hold 200 k (layer-toggle shortcuts)) ;; k on short press, toggle shortcuts layer on hold
   a (tap-hold 200 a (layer-toggle altcuts))  ;; a on short press, toggle altcuts layer on hold

   ;; shortcuts layer aliases
   acr A-ret  ;; tap alt-ret
   atab (tap-hold 250 A-tab M-A-right)  ;; tap switch app, cycle screens/windows
   aspc A-spc  ;; ulauncher
   tmx (tap-hold 200 C-q (tap-macro C-q F))  ;; tap tmux prefix, hold tmux fzf session finder
   sfcp C-a  ;; nvim/vim softcaps
   rmx C-x  ;; tmux remote prefix
   dkl C-M-left  ;; switch desktop left
   dkr C-M-right ;; switch desktop right
   tabp C-g   ;; previous browser tab/tmux window
   tabn C-y   ;; next browser tab/tmux window
   d1 (tap-hold 200 C-M-1 M-A-1)  ;; switch to desktop 1, hold to move window to desktop 1
   d2 (tap-hold 200 C-M-2 M-A-2)  ;; switch to desktop 2, hold to move window to desktop 2
   d3 (tap-hold 200 C-M-3 M-A-3)  ;; switch to desktop 3, hold to move window to desktop 3
   lsd (tap-hold 200 C-M-0 C-M-4)  ;; last used desktop, hold to switch to 4th desktop
   comp (tap-hold 150 C-ret C-S-ret)  ;; complete suggestion (hold for copilot completion)
   tild (tap-hold 200 ~ (tap-macro ~ /))  ;; tap ~, hold ~/
   lbuf (tap-macro esc spc b b)  ;; switch buffer in nvim
   cmt (tap-macro esc c c)  ;; clear line and insert in nvim/vim
   cpy (tap-hold 200 C-c C-S-c)  ;; tap copy, hold raw copy
   pst (tap-hold 200 C-V C-S-v)  ;; tap paste, hold raw paste
   min C-M-bspc  ;; minimize window, corresponds to kwin keymap
   cup C-up  ;; ctrl-up
   cdn C-down ;; ctrl-down
   crt C-right ;; ctrl-right
   clf C-left ;; ctrl-left
   nxt (tap-hold 200 C-n A-n) ;; tap next cmp suggestion, hold next copilot suggestion
   prv (tap-hold 200 C-p A-p) ;; tap prev cmp suggestion, hold prev copilot suggestion
   fw C-right
   bw C-left

   ;; altcuts
   pwd (cmd-button "source ~/.scripts/xdotool/xdo_keepass_handler.sh") ;; focus keepassxc
   tup (cmd-button "tmux send-keys -t display2 Up Up Up")  ;; tmux up
   tdn (cmd-button "tmux send-keys -t display2 Down Down Down")  ;; tmux down
   tscu (cmd-button "tmux send-keys -t display2 C-u")  ;; tmux ctrl-u
   tscd (cmd-button "tmux send-keys -t display2 C-d")  ;; tmux ctrl-d
   twl (cmd-button "tmux send-keys -t display2")  ;; tmux ctrl-d
   twr (cmd-button "tmux next-window -t display2")  ;; tmux ctrl-d

   ;; Deprecated
   ;; lend (tap-macro esc $)  ;; end of line
   ;; lbeg (tap-macro esc ^)  ;; beginning of line
   ;; lnt C-A-n  ;; line number relative/fixed toggle
)

;; main layer that is active by default, should be kept as clean as possible
(deflayer main
  caps f1   f2   f3   f4   f7   f6   f7   f8   f9   f10  f11  f12  ssrq ins del
  grv   1    2    3    4    5    6    7    8    9    0    -    =     bspc   pgup
  tab    q    w    e    r    t    y    u    i    o    p    [    ]     \     home
  @ectl  @a    s    @d   f    g    h    j    k   l    ;    '        ret     end
  @lsft     z    x    c   v    b    n    m    ,    .    /       rsft   up   pgdn
  lctl lmet lalt             spc                   @ralt    rctl left down rght
)

;; this layer exist to handle issues with typing shift modified letters that are
;; assigned as modifiers for for other layers it should closely match the src
;; layer. only add modifiers that should work with shift
(deflayer main-shift
  caps f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12  ssrq ins del
  grv   1    2    3    4    5    6    7    8    9    0    -    =     bspc   pgup
  tab    q    w    e    r    t    y    u    i    o    p    [    ]     \     home
  @ectl   a    s    d    f    g    h    j    k    l    ;    '        ret    end
  XX       z    x    c    v    b    n    m    ,    .    /       rsft   up   pgdn
  lctl lmet lalt           spc                      @ralt    rctl left down rght
)

;; this layer is for commonly used shortcuts and motions when typing or coding
(deflayer shortcuts
   XX  XX   XX   XX   XX   XX   XX   XX   XX   XX    XX   XX   XX   XX   XX  @min
   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX      @atab XX
 @atab   XX   @fw  XX   XX   XX   XX   XX   XX   XX   @prv @dkl @dkr   @tild XX
 @ectl  @sfcp  XX   XX  @tmx @rmx  lft  down  up  rght @tabp @tabn     @acr XX
   lsft    XX  @cmt @cpy  @pst @bw @nxt @lsd  @d1  @d2   @d3    XX    @cup  XX
   lctl lmet lalt           @aspc                     XX      XX   @clf @cdn @crt
)

;; this layer is for lesser used shortcuts and app/script launching
(deflayer altcuts
   XX  XX   XX   XX   XX   XX   XX   XX   XX   XX    XX   XX   XX   XX   XX  XX
   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX     XX     XX
   XX    XX   XX   XX   XX   XX   XX @tscu   XX   XX  @pwd  XX   XX    XX     XX
  caps    XX   XX @tscd  XX   XX   XX  @tdn  @tup  XX  @twl @twr     XX     XX
   XX      XX   XX   XX   XX   XX   XX   XX   XX   XX   XX      XX     XX    XX
   XX  XX   XX              XX                       XX      XX    XX  XX   XX
)

;; this layer is just a templater for new layers that should have most keys
;; disabled
(deflayer all-xes
   XX  XX   XX   XX   XX   XX   XX   XX   XX   XX    XX   XX   XX   XX   XX  XX
   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX     XX     XX
   XX    XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX    XX     XX
   XX     XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX        XX     XX
   XX      XX   XX   XX   XX   XX   XX   XX   XX   XX   XX      XX     XX    XX
   XX  XX   XX              XX                       XX      XX    XX  XX   XX
)

;; this layer is just a templater for new layers that should have most keys
;; fall through
(deflayer all-underscores
   _   _    _    _    _    _    _    _    _    _     _    _    _    _    _   _
   _    _    _    _    _    _    _    _    _    _    _    _    _      _      _
   _     _    _    _    _    _    _    _    _    _    _    _    _     _      _
   _      _    _    _    _    _    _    _    _    _    _    _         _      _
   _       _    _    _    _    _    _    _    _    _    _       _      _     _
   _   _    _               _                        _       _     _   _    _
)

;; TODO: MIGHT DEPRECATE THIS
(deflayer ctl
  C-esc  C-f1   C-f2   C-f3   C-f4   C-f5   C-f6   C-f7   C-f8   C-f9   C-f10  C-f11  C-f12  C-ssrq C-ins  C-del
  C-grv   C-1    C-2    C-3    C-4    C-5    C-6    C-7    C-8   C-9    C-0    C--    C-=   C-bspc C-pgup
  C-tab    C-q    C-w    C-e    C-r    C-t    C-y    C-u    C-i    C-o    C-p    C-[    C-]  C-\\   C-home
  XX        C-a   C-s    C-d    C-f    C-g    C-h    C-j    C-k    C-l    C-;    C-'        C-ret  C-end
  lsft          C-z    C-x    C-c    C-v    C-b    C-n    C-m    C-,    C-.    C-/       _      C-up   C-pgdn
  _           _              _          C-spc                  _      _                C-lft C-down C-rght
)
