#| --------------------------------------------------------------------------

                              KMonad: Guided tour

  Welcome to the KMonad configuration tutorial. This document aims to explain:
  1. The configuration syntax
  2. The required information
  3. All possible configuration options

  This document should be a runnable configuration, so with some tweaks to the
  `defcfg` block (see below) you should be able to try out all the examples
  interactively.

  -------------------------------------------------------------------------- |#


#| --------------------------------------------------------------------------

                     Basic syntax: comments and parentheses

  KMonad's configuration language is styled on various lisps, like scheme or
  Common Lisp. In a lisp, every statement is entered between '(' and ')'s. If
  you are more used to Fortran style languages (python, ruby, C, Java, etc.), the
  change is quite straightforward: the function name moves into the parentheses,
  and you don't use commas to separate arguments. I.e.

  This:     my_function(a, 3, "Alakazam")
  Becomes:  (my_function a 3 "Alakazam")

  The reason for this is because Lisp-style languages are very easy to parse and
  write syntax-highlighters for.

  We also provide standard Lisp syntax for comments:
  - block comments between: #| and its reverse
  - line comments following: ;;

  Unlike standard lisp, a single ; does not denote a comment, but instead the
  keycode for semicolon.

  Also, as you might have noticed, whitespace is possible anywhere.

  To check for syntax errors while editing, invoke KMonad with the -d option.

  -------------------------------------------------------------------------- |#


#| --------------------------------------------------------------------------
                         Necessary: the `defcfg` block

  There are a few bits of information that are required to be present in a
  KMonad configuration file. One of these is the existence of exactly 1 `defcfg`
  statement. This statement is used to customize various configuration settings.
  Many of these settings have default values, but a minimal definition must
  include at least an 'input' field and an 'output' field. These describe how
  KMonad captures its inputs and how it emits its outputs.

  First, let's go over the optional, non-OS specific settings. Currently there
  are only 2:

  - fallthrough: `true` or `false`, defaults to `false`

    KMonad catches input events and tries to match them to various handlers. If
    it cannot match an event to any handler (for example, if it isn't included
    in the `defsrc` block, or if it is, but the current keymap does not map any
    buttons to it), then the event gets quietly ignored. If `fallthrough` is set
    to `true`, any unhandled events simply get reemitted.

  - allow-cmd: `true` or `false`, defaults to `false`

    If this is set to `false`, any action that runs a shell-command will simply
    log to `stdout` without ever running (log-level info). Don't ever enable
    this on a configuration that you do not trust, because:

      (cmd-button "rm -rf ~/*")

    is a thing. For more information on the `cmd-button' function, see the
    section on Command buttons below.

  There are also some optional OS specific settings that we support:

  - `cmp-seq': KEY, defaults to `RightAlt' (Linux X11 specific)

    This sets your compose key for Unicode input. For more information, as well
    as a workaround to also make this work on windows, see the section on
    Compose-key sequences below.

  - `cmp-seq-delay': NUMBER (in milliseconds)

    This sets a delay between each pressed key in a compose-key sequence.  Some
    environments may have troubles recognizing the key sequence if it's pressed
    too rapidly; if you experience any problems in this direction, you can try
    setting this value to `5' or `10' and see if that helps.

  Secondly, let's go over how to specify the `input` and `output` fields of a
  `defcfg` block. This differs between OS'es, and so do the capabilities of
  these interfaces.


  -- Linux ------

  In Linux we deal with input by performing an ioctl-grab on a specific
  device-file. This allows us to hook KMonad on the input of exactly 1 keyboard,
  and allows you to run multiple instances of KMonad for different keyboards. We
  make an input using:
    (device-file "/dev/input/by-id/my-keyboard-kbd")

  NOTE: Any valid path to a device-file will work, but it is recommended to use
  the 'by-id' directory, since these names will not change if you replug the
  device.

  We deal with output by creating a 'uinput' device. This requires that the
  'uinput' kernel module is loaded. The easiest way to ensure this is by calling
  'sudo modprobe uinput'. We create a uinput device using:
    (uinput-sink "name" "optional post-init command")
  -------------------------------------------------------------------------- |#

(defcfg
  ;; For Linux
  input  (device-file "/dev/input/by-id/usb-Winry_Winry315-event-kbd")
  output (uinput-sink "Kmonad Winry Output"
    ;; To understand the importance of the following line, see the section on
    ;; Compose-key sequences at the near-bottom of this file.
    "/run/current-system/sw/bin/sleep 1 && /run/current-system/sw/bin/setxkbmap -option compose:ralt")
  cmp-seq ralt    ;; Set the compose key to `RightAlt'
  cmp-seq-delay 5 ;; 5ms delay between each compose-key sequence press

  ;; For Windows
  ;; input  (low-level-hook)
  ;; output (send-event-sink)

  ;; For MacOS
  ;; input  (iokit-name "my-keyboard-product-string")
  ;; output (kext)

  ;; Comment this if you want unhandled events not to be emitted
  fallthrough true

  ;; Set this to false to disable any command-execution in KMonad
  allow-cmd true
)


(defsrc
     f17      mute       f23
  f16  f18  volu vold  f22  f24
  f1    f2    f3    f4    f5
  f6    f7    f8    f9    f10
  f11   f12   f13   f14   f15
)


(defalias
   eml (tap-macro C-M-1 C-S-1 :delay 100)
   msg (tap-macro C-M-1 C-S-2 :delay 100)
   dis (tap-macro C-M-1 C-S-3 :delay 100)
   cal (tap-macro C-M-1 C-S-4 :delay 100)
   drv (tap-macro C-M-1 C-S-5 :delay 100)
   not (tap-macro C-M-1 C-S-6 :delay 100)
   git (tap-macro C-M-1 C-S-7 :delay 100)
   gpt (tap-macro C-M-1 C-S-8 :delay 100)
   sch (tap-macro C-M-1 C-S-9 :delay 100)
   soc (tap-macro C-M-1 C-S-9 C-down :delay 100)
   srv (tap-macro C-M-1 C-S-9 C-down C-down :delay 100)
   pwd (cmd-button "source ~/.scripts/xdotool/xdo_keepass_handler.sh") ;; focus keepassxc
   ;; eml (tap-hold 200 (tap-macro C-M-1 C-S-1 :delay 200) (tap-macro C-M-1 C-S-1 C-S-1 :delay 200))
   ;; msg (tap-hold 200 (tap-macro C-M-1 C-S-2 :delay 200) (tap-macro C-M-1 C-S-2 C-S-2 :delay 200))
   ;; dis (tap-hold 200 (tap-macro C-M-1 C-S-3 :delay 200) (tap-macro C-M-1 C-S-3 C-S-3 :delay 200))
   ;; drv (tap-hold 200 (tap-macro C-M-1 C-S-4 :delay 200) (tap-macro C-M-1 C-S-4 C-S-4 :delay 200))
   ;; git (tap-hold 200 (tap-macro C-M-1 C-S-5 :delay 200) (tap-macro C-M-1 C-S-5 C-S-5 :delay 200))
   ;; gpt (tap-hold 200 (tap-macro C-M-1 C-S-6 :delay 200) (tap-macro C-M-1 C-S-6 C-S-6 :delay 200))
   ;; sch (tap-hold 200 (tap-macro C-M-1 C-S-7 :delay 200) (tap-macro C-M-1 C-S-7 C-S-7 :delay 200))
   ;; soc (tap-hold 200 (tap-macro C-M-1 C-S-8 :delay 200) (tap-macro C-M-1 C-S-8 C-S-8 :delay 200))
   ;; srv (tap-hold 200 (tap-macro C-M-1 C-S-9 :delay 200) (tap-macro C-M-1 C-S-9 C-S-9 :delay 200))
   kpss (cmd-button "source ~/.scripts/xdotool/xdo_keepass_handler.sh")
   dbf C-M-4
   pod C-M-4
   yt C-M-4
   dsk1  (tap-macro C-M-,)
   dsk2  (tap-macro C-M-.)
   dsk3  (tap-macro C-M-/)
   dsk4  (tap-macro C-M-')
   wvup  A-Up
   wvdn  A-Down
)


(deflayer main
      pp       mute        f23
  next  prev volu  vold  brup brdn
  @eml   @cal   @git   @soc   @dbf
  @msg   @drv   @gpt   @srv   @pod
  @dis   @not   @sch   @pwd   @yt
)


(deflayer ralt
      -        -         - 
   -    -    -    -    -    -
  -     -     -     -     - 
  -     -     -     -     - 
  -     -     -     -     -
)
